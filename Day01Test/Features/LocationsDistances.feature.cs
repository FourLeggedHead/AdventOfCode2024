// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Day01Test.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class LocationsDistancesFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Locations Distances", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "LocationsDistances.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 3
  #line hidden
            global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                        "Location IDs"});
            table1.AddRow(new string[] {
                        "3"});
            table1.AddRow(new string[] {
                        "4"});
            table1.AddRow(new string[] {
                        "2"});
            table1.AddRow(new string[] {
                        "1"});
            table1.AddRow(new string[] {
                        "3"});
            table1.AddRow(new string[] {
                        "3"});
#line 4
    await testRunner.GivenAsync("the first list of location IDs is:", ((string)(null)), table1, "Given ");
#line hidden
            global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                        "Location IDs"});
            table2.AddRow(new string[] {
                        "4"});
            table2.AddRow(new string[] {
                        "3"});
            table2.AddRow(new string[] {
                        "5"});
            table2.AddRow(new string[] {
                        "3"});
            table2.AddRow(new string[] {
                        "9"});
            table2.AddRow(new string[] {
                        "3"});
#line 12
    await testRunner.AndAsync("the second list of location IDs is:", ((string)(null)), table2, "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The distance between the smallest location IDs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Locations Distances")]
        public async global::System.Threading.Tasks.Task TheDistanceBetweenTheSmallestLocationIDs()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("The distance between the smallest location IDs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
  await this.FeatureBackgroundAsync();
#line hidden
#line 22
    await testRunner.GivenAsync("the 1st smallest location ID in the first list is 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 23
    await testRunner.AndAsync("the 1st smallest location ID in the second list is 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
    await testRunner.WhenAsync("I calculate the distance between the two location IDs", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 25
    await testRunner.ThenAsync("the distance should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The distance between the 2nd smallest location IDs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Locations Distances")]
        public async global::System.Threading.Tasks.Task TheDistanceBetweenThe2NdSmallestLocationIDs()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("The distance between the 2nd smallest location IDs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
  await this.FeatureBackgroundAsync();
#line hidden
#line 28
    await testRunner.GivenAsync("the 2nd smallest location ID in the first list is 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 29
    await testRunner.AndAsync("the 2nd smallest location ID in the second list is 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
    await testRunner.WhenAsync("I calculate the distance between the two location IDs", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 31
    await testRunner.ThenAsync("the distance should be 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The distance between the 3rd smallest location IDs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Locations Distances")]
        public async global::System.Threading.Tasks.Task TheDistanceBetweenThe3RdSmallestLocationIDs()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("The distance between the 3rd smallest location IDs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
  await this.FeatureBackgroundAsync();
#line hidden
#line 34
    await testRunner.GivenAsync("the 3rd smallest location ID in the first list is 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 35
    await testRunner.AndAsync("the 3rd smallest location ID in the second list is 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
    await testRunner.WhenAsync("I calculate the distance between the two location IDs", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 37
    await testRunner.ThenAsync("the distance should be 0", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The distance between the 4th smallest location IDs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Locations Distances")]
        public async global::System.Threading.Tasks.Task TheDistanceBetweenThe4ThSmallestLocationIDs()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("The distance between the 4th smallest location IDs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
  await this.FeatureBackgroundAsync();
#line hidden
#line 40
    await testRunner.GivenAsync("the 4th smallest location ID in the first list is 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 41
    await testRunner.AndAsync("the 4th smallest location ID in the second list is 4", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
    await testRunner.WhenAsync("I calculate the distance between the two location IDs", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
    await testRunner.ThenAsync("the distance should be 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The distance between the 5th smallest location IDs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Locations Distances")]
        public async global::System.Threading.Tasks.Task TheDistanceBetweenThe5ThSmallestLocationIDs()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("The distance between the 5th smallest location IDs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
  await this.FeatureBackgroundAsync();
#line hidden
#line 46
    await testRunner.GivenAsync("the 5th smallest location ID in the first list is 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 47
    await testRunner.AndAsync("the 5th smallest location ID in the second list is 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
    await testRunner.WhenAsync("I calculate the distance between the two location IDs", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 49
    await testRunner.ThenAsync("the distance should be 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The distance between the 6th smallest location IDs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Locations Distances")]
        public async global::System.Threading.Tasks.Task TheDistanceBetweenThe6ThSmallestLocationIDs()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("The distance between the 6th smallest location IDs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
  await this.FeatureBackgroundAsync();
#line hidden
#line 52
    await testRunner.GivenAsync("the 6th smallest location ID in the first list is 4", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 53
    await testRunner.AndAsync("the 6th smallest location ID in the second list is 9", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
    await testRunner.WhenAsync("I calculate the distance between the two location IDs", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
    await testRunner.ThenAsync("the distance should be 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The total distance between the 2 lists")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Locations Distances")]
        public async global::System.Threading.Tasks.Task TheTotalDistanceBetweenThe2Lists()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("The total distance between the 2 lists", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
  await this.FeatureBackgroundAsync();
#line hidden
#line 58
    await testRunner.WhenAsync("I calculate the total distance between the two lists", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 59
    await testRunner.ThenAsync("the total distance should be 11", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
